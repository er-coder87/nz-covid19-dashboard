{"ast":null,"code":"var _jsxFileName = \"/Users/eric.lim/dev/scratch/e-commerce-app/src/components/TotalCases.tsx\";\nimport * as React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { formatDateToString } from './Overview';\nexport const TotalCases = ({\n  totalData\n}) => {\n  const dates = Array.from(new Set(totalData.map(item => item.dateOfReport)));\n  const dailyRates = [];\n  dates.reverse().forEach((date, index) => {\n    const dailyRate = totalData.filter(item => item.dateOfReport === date);\n\n    if (index === 0) {\n      dailyRates.push({\n        date: new Date(date || ''),\n        number: dailyRate.length,\n        totalNumber: dailyRate.length\n      });\n    } else {\n      dailyRates.push({\n        date: new Date(date || ''),\n        number: dailyRate.length,\n        totalNumber: dailyRate.length + dailyRates[index - 1].totalNumber\n      });\n    }\n  });\n  let totalNumber = dailyRates.map(a => a.totalNumber);\n  let day = dailyRates.map(a => formatDateToString(a.date));\n  const data = {\n    datasets: [{\n      data: totalNumber,\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)'\n    }],\n    labels: day\n  };\n  return /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    width: 400,\n    height: 400,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      legend: {\n        display: false\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            fontColor: 'white'\n          }\n        }],\n        xAxes: [{\n          ticks: {\n            fontColor: 'white'\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/eric.lim/dev/scratch/e-commerce-app/src/components/TotalCases.tsx"],"names":["React","Line","formatDateToString","TotalCases","totalData","dates","Array","from","Set","map","item","dateOfReport","dailyRates","reverse","forEach","date","index","dailyRate","filter","push","Date","number","length","totalNumber","a","day","data","datasets","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","labels","responsive","maintainAspectRatio","legend","display","scales","yAxes","ticks","beginAtZero","fontColor","xAxes"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAEA,OAAO,MAAMC,UAA8C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC/E,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQJ,SAAS,CAACK,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,YAA3B,CAAR,CAAX,CAAd;AACA,QAAMC,UAAiE,GAAG,EAA1E;AAEAP,EAAAA,KAAK,CAACQ,OAAN,GAAgBC,OAAhB,CAAwB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvC,UAAMC,SAAS,GAAGb,SAAS,CAACc,MAAV,CAAiBR,IAAI,IAAIA,IAAI,CAACC,YAAL,KAAsBI,IAA/C,CAAlB;;AACA,QAAIC,KAAK,KAAK,CAAd,EAAiB;AACfJ,MAAAA,UAAU,CAACO,IAAX,CAAgB;AACdJ,QAAAA,IAAI,EAAE,IAAIK,IAAJ,CAASL,IAAI,IAAI,EAAjB,CADQ;AAEdM,QAAAA,MAAM,EAAEJ,SAAS,CAACK,MAFJ;AAGdC,QAAAA,WAAW,EAAEN,SAAS,CAACK;AAHT,OAAhB;AAKD,KAND,MAMO;AACLV,MAAAA,UAAU,CAACO,IAAX,CAAgB;AACdJ,QAAAA,IAAI,EAAE,IAAIK,IAAJ,CAASL,IAAI,IAAI,EAAjB,CADQ;AAEdM,QAAAA,MAAM,EAAEJ,SAAS,CAACK,MAFJ;AAGdC,QAAAA,WAAW,EAAEN,SAAS,CAACK,MAAV,GAAmBV,UAAU,CAACI,KAAK,GAAG,CAAT,CAAV,CAAsBO;AAHxC,OAAhB;AAKD;AACF,GAfD;AAgBA,MAAIA,WAAW,GAAGX,UAAU,CAACH,GAAX,CAAee,CAAC,IAAIA,CAAC,CAACD,WAAtB,CAAlB;AACA,MAAIE,GAAG,GAAGb,UAAU,CAACH,GAAX,CAAee,CAAC,IAAItB,kBAAkB,CAACsB,CAAC,CAACT,IAAH,CAAtC,CAAV;AAEA,QAAMW,IAAI,GAAG;AACXC,IAAAA,QAAQ,EAAE,CACR;AACED,MAAAA,IAAI,EAAEH,WADR;AAEEK,MAAAA,eAAe,EAAE,sBAFnB;AAGEC,MAAAA,WAAW,EAAE,oBAHf;AAIEC,MAAAA,oBAAoB,EAAE,sBAJxB;AAKEC,MAAAA,gBAAgB,EAAE;AALpB,KADQ,CADC;AAUXC,IAAAA,MAAM,EAAEP;AAVG,GAAb;AAaA,sBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEC,IADR;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,MAAM,EAAE,GAHV;AAIE,IAAA,OAAO,EAAE;AACPO,MAAAA,UAAU,EAAE,IADL;AAEPC,MAAAA,mBAAmB,EAAE,IAFd;AAGPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AADH,OAHD;AAMPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,KAAK,EAAE;AACLC,YAAAA,WAAW,EAAE,IADR;AAELC,YAAAA,SAAS,EAAE;AAFN;AADT,SADK,CADD;AASNC,QAAAA,KAAK,EAAE,CACL;AACEH,UAAAA,KAAK,EAAE;AACLE,YAAAA,SAAS,EAAE;AADN;AADT,SADK;AATD;AAND,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA+BD,CAnEM","sourcesContent":["import * as React from 'react';\nimport { TotalData } from './Sex';\nimport { Line } from 'react-chartjs-2';\nimport { formatDateToString } from './Overview';\n\nexport const TotalCases: React.FunctionComponent<TotalData> = ({ totalData }) => {\n  const dates = Array.from(new Set(totalData.map(item => item.dateOfReport)));\n  const dailyRates: { date: Date; number: number; totalNumber: number }[] = [];\n\n  dates.reverse().forEach((date, index) => {\n    const dailyRate = totalData.filter(item => item.dateOfReport === date);\n    if (index === 0) {\n      dailyRates.push({\n        date: new Date(date || ''),\n        number: dailyRate.length,\n        totalNumber: dailyRate.length,\n      });\n    } else {\n      dailyRates.push({\n        date: new Date(date || ''),\n        number: dailyRate.length,\n        totalNumber: dailyRate.length + dailyRates[index - 1].totalNumber,\n      });\n    }\n  });\n  let totalNumber = dailyRates.map(a => a.totalNumber);\n  let day = dailyRates.map(a => formatDateToString(a.date));\n\n  const data = {\n    datasets: [\n      {\n        data: totalNumber,\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n      },\n    ],\n    labels: day,\n  };\n\n  return (\n    <Line\n      data={data}\n      width={400}\n      height={400}\n      options={{\n        responsive: true,\n        maintainAspectRatio: true,\n        legend: {\n          display: false,\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                fontColor: 'white',\n              },\n            },\n          ],\n          xAxes: [\n            {\n              ticks: {\n                fontColor: 'white',\n              },\n            },\n          ],\n        },\n      }}\n    ></Line>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}